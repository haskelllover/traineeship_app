package com.myy803.traineeship_app.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import com.myy803.traineeship_app.domainmodel.Professor;
import com.myy803.traineeship_app.domainmodel.TraineeshipPosition;
import com.myy803.traineeship_app.mapper.ProfessorMapper;
import com.myy803.traineeship_app.mapper.TraineeshipPositionMapper;
import com.myy803.traineeship_app.domainmodel.Evaluation;
import com.myy803.traineeship_app.service.ProfessorService;

@Controller
@RequestMapping("/professor")
public class ProfessorController {
    
    private final ProfessorService professorService;
    
    @Autowired
    public ProfessorController(ProfessorService professorService) {
        this.professorService = professorService;
    }
    
    @GetMapping("/dashboard")
    public String dashboard(Model model) {
        return professorService.getProfessorDashboard();
    }

    @GetMapping("/profile")
    public String viewProfile(Model model) {
        return professorService.retrieveProfile(model);
    }

    @PostMapping("/profile")
    public String saveProfile(@ModelAttribute("professor") Professor professor, Model model) {
        return professorService.saveProfile(professor, model);
    }
    
    @GetMapping("/assignees")
    public String listAssignedTraineeships(Model model) {
        return professorService.listAssigneeTraineeships(model);
    }
    
    @GetMapping("/professor/positions")
    public String getSupervisedPositions(
        Authentication authentication,
        Model model
    ) {
        try {
            ProfessorMapper professorMapper;
            TraineeshipPositionMapper positionMapper;
			// 1. Get current professor
            Professor professor = professorMapper.findByUsername(authentication.getName())
                .orElseThrow(() -> new RuntimeException("Professor not found"));
            
            // 2. Get all positions supervised by this professor
            List<TraineeshipPosition> positions = positionMapper.findBySupervisorUsername(professor);
            
            // 3. Add to model and return view
            model.addAttribute("positions", positions);
            return "professor/positions";
            
        } catch (Exception e) {
            model.addAttribute("errorMessage", "Error: " + e.getMessage());
            return "professor/positions"; // Still show page with error
        }
    }
    
    @GetMapping("/assignees/{positionId}/evaluate")
    public String showEvaluationForm(@PathVariable Integer positionId, Model model) {
        return professorService.evaluateAssignedTraineeship(positionId, model);
    }

    @PostMapping("/assignees/{positionId}/evaluate")
    public String saveEvaluation(@PathVariable Integer positionId, 
                               @ModelAttribute Evaluation evaluation, 
                               Model model) {
        return professorService.saveEvaluation(positionId, evaluation, model);
    }
}