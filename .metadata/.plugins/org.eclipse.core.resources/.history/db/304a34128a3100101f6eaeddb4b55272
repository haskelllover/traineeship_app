// CompanyServiceImpl.java
package com.myy803.traineeship_app.service;

import com.myy803.traineeship_app.domainmodel.Company;
import com.myy803.traineeship_app.domainmodel.Evaluation;
import com.myy803.traineeship_app.domainmodel.EvaluationType;
import com.myy803.traineeship_app.domainmodel.TraineeshipPosition;
import com.myy803.traineeship_app.mapper.CompanyMapper;
import com.myy803.traineeship_app.mapper.TraineeshipPositionMapper;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;

import java.util.List;
import java.util.Optional;

@Service
@Transactional
public class CompanyServiceImpl implements CompanyService {
    
    private final CompanyMapper companyMapper;
    private final TraineeshipPositionMapper positionMapper;

    @Autowired
    public CompanyServiceImpl(CompanyMapper companyMapper, 
                            TraineeshipPositionMapper positionMapper) {
        this.companyMapper = companyMapper;
        this.positionMapper = positionMapper;
    }

    @Override
    public String getCompanyDashboard() {
        return "company/dashboard";
    }

    @Override
    public String retrieveProfile(Model model) {
        String username = getCurrentUsername();
        Company company = companyMapper.findByUsername(username)
            .orElseGet(() -> {
                // Create new company profile if not found
                Company newCompany = new Company();
                newCompany.setUsername(username);
                newCompany.setCompanyName("New Company");
                newCompany.setCompanyLocation("Unknown");
                return companyMapper.save(newCompany);
            });
        
        model.addAttribute("company", company);
        return "company/profile";
    }

    @Override
    public String saveProfile(Company company, Model model) {
        try {
            String currentUsername = getCurrentUsername();
            // Ensure we're updating the correct company
            Company existing = companyMapper.findByUsername(currentUsername)
                .orElseThrow(() -> new IllegalArgumentException("Company not found"));
            
            // Update only the fields we want to allow changing
            existing.setCompanyName(company.getCompanyName());
            existing.setCompanyLocation(company.getCompanyLocation());
            
            companyMapper.save(existing);
            model.addAttribute("successMessage", "Profile updated successfully");
            model.addAttribute("company", existing);
            return "company/profile";
        } catch (Exception e) {
            model.addAttribute("errorMessage", "Error updating profile: " + e.getMessage());
            return "company/profile";
        }
    }

    @Override
    public String listAvailablePosition(Model model) {
        String username = getCurrentUsername();
        List<TraineeshipPosition> positions = positionMapper.findByCompanyUsernameAndIsAssigned(username, false);
        model.addAttribute("positions", positions);
        return "company/positions";
    }

    @Override
    public String showPositionForm(Model model) {
        model.addAttribute("position", new TraineeshipPosition());
        return "company/position-form";
    }

    @Override
    public String savePosition(TraineeshipPosition position, Model model) {
        try {
            String username = getCurrentUsername();
            Company company = companyMapper.findByUsername(username)
                .orElseThrow(() -> new IllegalArgumentException("Company not found"));
            
            position.setCompany(company);
            positionMapper.save(position);
            
            return "redirect:/company/positions";
        } catch (Exception e) {
            model.addAttribute("errorMessage", "Error saving position: " + e.getMessage());
            return "company/position-form";
        }
    }

    @Override
    public String listAssigneePostHours(Model model) {
        String username = getCurrentUsername();
        List<TraineeshipPosition> positions = positionMapper.findByCompanyUsernameAndIsAssigned(username, true);
        model.addAttribute("positions", positions);
        return "company/assignees";
    }

    @Override
    public String evaluateAssignedTraineeship(Integer positionId, Model model) {
        try {
            TraineeshipPosition position = positionMapper.findById(positionId)
                .orElseThrow(() -> new IllegalArgumentException("Position not found"));
            
            model.addAttribute("position", position);
            model.addAttribute("evaluation", new Evaluation());
            return "company/evaluation-form";
        } catch (Exception e) {
            model.addAttribute("errorMessage", e.getMessage());
            return "redirect:/company/assignees";
        }
    }

    @Override
    public String saveEvaluation(Integer positionId, Evaluation evaluation, Model model) {
        try {
            evaluation.setEvaluationType(EvaluationType.CompanyEvaluation);
            
            TraineeshipPosition position = positionMapper.findById(positionId)
                .orElseThrow(() -> new IllegalArgumentException("Position not found"));
            
            position.getEvaluations().add(evaluation);
            positionMapper.save(position);
            
            model.addAttribute("successMessage", "Evaluation saved successfully");
            return "redirect:/company/assignees";
        } catch (Exception e) {
            model.addAttribute("errorMessage", "Error saving evaluation: " + e.getMessage());
            return "company/evaluation-form";
        }
    }

    @Override
    public String deletePosition(Integer positionId, Model model) {
        try {
            positionMapper.deleteById(positionId);
            return "redirect:/company/positions";
        } catch (Exception e) {
            model.addAttribute("errorMessage", "Error deleting position: " + e.getMessage());
            return "company/positions";
        }
    }

    private String getCurrentUsername() {
        return SecurityContextHolder.getContext().getAuthentication().getName();
    }
}