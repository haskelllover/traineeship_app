package com.myy803.traineeship_app.service;

import java.util.ArrayList;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;

import com.myy803.traineeship_app.domainmodel.Company;
import com.myy803.traineeship_app.domainmodel.Student;
import com.myy803.traineeship_app.domainmodel.TraineeshipPosition;
import com.myy803.traineeship_app.mapper.StudentMapper;
import com.myy803.traineeship_app.mapper.TraineeshipPositionMapper;

@Service
@Transactional
public class StudentServiceImpl implements StudentService {
    
    private final StudentMapper studentMapper;
    private final TraineeshipPositionMapper positionMapper;

    @Autowired
    public StudentServiceImpl(StudentMapper studentMapper,
                            TraineeshipPositionMapper positionMapper) {
        this.studentMapper = studentMapper;
        this.positionMapper = positionMapper;
    }

    @Override
    public String getStudentDashboard() {
        return "student/dashboard";
    }

    @Override
    public String retrieveProfile(Model model) {
        String username = getCurrentUsername();
        Student student = studentMapper.findByUsername(username)
            .orElseThrow(() -> new IllegalArgumentException("Student not found"));
        
        // Add studentName as fullName to the model
        model.addAttribute("studentName", student.getStudentName());
        model.addAttribute("student", student);
        return "student/profile";
    }

    @Override
    public String saveProfile(Student student, Model model) {
        try {
            String currentUsername = getCurrentUsername();
            // Ensure we're updating the correct company
            Student existing = studentMapper.findByUsername(currentUsername)
                .orElseThrow(() -> new IllegalArgumentException("Company not found"));
            
            // Update only the fields we want to allow changing
            existing.setStudentName(student.getStudentName());
            existing.setCompanyLocation(student.getLocation());
            
            studentMapper.save(existing);
            model.addAttribute("successMessage", "Profile updated successfully");
            model.addAttribute("company", existing);
            return "company/profile";
        } catch (Exception e) {
            model.addAttribute("errorMessage", "Error updating profile: " + e.getMessage());
            return "company/profile";
        }
    }


    @Override
    public String initLogbook(Model model) {
        String username = getCurrentUsername();
        Student student = studentMapper.findByUsername(username)
            .orElseThrow(() -> new IllegalArgumentException("Student not found"));
        
        model.addAttribute("position", student.getAssignedTraineeship());
        
        model.addAttribute("student", student);
        
        return "student/logbook"; 
    }

    @Override
    public String saveLogbook(@ModelAttribute("position") TraineeshipPosition position, Model model) {
        try {
            positionMapper.save(position);
            model.addAttribute("successMessage", "Logbook updated successfully");
            return "student/logbook";
        } catch (Exception e) {
            model.addAttribute("errorMessage", "Error updating logbook: " + e.getMessage());
            return "student/logbook";
        }
    }

    @Override
    public String applyForTraineeship(Model model) {
        String username = getCurrentUsername();
        Student student = studentMapper.findByUsername(username)
            .orElseThrow(() -> new IllegalArgumentException("Student not found"));
        
        model.addAttribute("student", student);
        return "student/apply-traineeship";
    }

    @Override
    public String submitApplication(Model model) {
        String username = getCurrentUsername();
        Student student = studentMapper.findByUsername(username)
            .orElseThrow(() -> new IllegalArgumentException("Student not found"));
        
        student.setLookingForTraineeship(true);
        studentMapper.save(student);
        
        model.addAttribute("successMessage", "Application submitted successfully!");
        return "redirect:/student/application-status";
    }

    private String getCurrentUsername() {
        return SecurityContextHolder.getContext().getAuthentication().getName();
    }

    @Override
    public String getApplicationStatus(Model model) {
        String username = getCurrentUsername();
        Student student = studentMapper.findByUsername(username)
            .orElseThrow(() -> new IllegalArgumentException("Student not found"));
        
        model.addAttribute("isLooking", student.isLookingForTraineeship());
        model.addAttribute("position", student.getAssignedTraineeship());
        model.addAttribute("student", student);
        
        return "student/application-status";
    }
}