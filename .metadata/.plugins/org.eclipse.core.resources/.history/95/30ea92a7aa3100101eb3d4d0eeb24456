package com.myy803.traineeship_app.service;

import com.myy803.traineeship_app.domainmodel.Student;
import com.myy803.traineeship_app.domainmodel.TraineeshipPosition;
import com.myy803.traineeship_app.mapper.StudentMapper;
import com.myy803.traineeship_app.mapper.TraineeshipPositionMapper;
import org.springframework.stereotype.Component;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

@Component
public class SearchBasedOnInterests implements PositionsSearchStrategy {
    private final StudentMapper studentMapper;
    private final TraineeshipPositionMapper positionMapper;

    public SearchBasedOnInterests(StudentMapper studentMapper,
                                TraineeshipPositionMapper positionMapper) {
        this.studentMapper = studentMapper;
        this.positionMapper = positionMapper;
    }

    @Override
    public List<TraineeshipPosition> search(String applicantUsername) {
        Student student = studentMapper.findByUsername(applicantUsername)
            .orElseThrow(() -> new IllegalArgumentException("Student not found"));
        
        // Get interests as a List<String> from the comma-separated string
        List<String> studentInterests = student.getInterestsList();
        
        if (studentInterests == null || studentInterests.isEmpty()) {
            throw new IllegalStateException("Student has no interests set");
        }

        // Get all available positions
        List<TraineeshipPosition> allPositions = positionMapper.findByIsAssigned(false);
        
        return allPositions.stream()
            .filter(position -> hasMatchingInterest(position, studentInterests))
            .collect(Collectors.toList());
    }

    private boolean hasMatchingInterest(TraineeshipPosition position, List<String> studentInterests) {
        if (position.getTopics() == null && position.getSkills() == null) {
            return false;
        }
        
        // Combine position topics and skills into a single string
        String positionKeywords = (position.getTopics() != null ? position.getTopics() : "") + " " +
                                (position.getSkills() != null ? position.getSkills() : "");
        
        // Split into individual keywords (trimmed and lowercase)
        List<String> keywords = Arrays.stream(positionKeywords.toLowerCase().split(",\\s*"))
                                    .map(String::trim)
                                    .collect(Collectors.toList());
        
        // Check if any student interest matches any position keyword
        return studentInterests.stream()
            .map(String::toLowerCase)
            .map(String::trim)
            .anyMatch(interest -> keywords.contains(interest));
    }
}