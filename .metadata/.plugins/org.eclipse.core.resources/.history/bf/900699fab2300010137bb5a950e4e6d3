package com.myy803.traineeship_app.service;

import com.myy803.traineeship_app.domainmodel.Professor;
import com.myy803.traineeship_app.domainmodel.TraineeshipPosition;
import com.myy803.traineeship_app.mapper.ProfessorMapper;
import com.myy803.traineeship_app.mapper.TraineeshipPositionMapper;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class AssignmentBasedOnInterests implements SupervisorAssignmentStrategy {
    private final TraineeshipPositionMapper positionMapper;
    private final ProfessorMapper professorMapper;

    public AssignmentBasedOnInterests(TraineeshipPositionMapper positionMapper, 
                                    ProfessorMapper professorMapper) {
        this.positionMapper = positionMapper;
        this.professorMapper = professorMapper;
    }

    @Override
    public void assign(Integer positionId) {
        TraineeshipPosition position = positionMapper.findById(positionId)
            .orElseThrow(() -> new IllegalArgumentException("Position not found"));
        
        if (position.getIsAssigned()) {
            throw new IllegalStateException("Position is already assigned");
        }

        List<Professor> professors = professorMapper.findAll();
        
        Professor bestMatch = null;
        int maxMatches = -1;
        
        for (Professor professor : professors) {
            int matches = countMatchingKeywords(
                professor.getInterests(), 
                position.getTopics() + " " + position.getSkills()
            );
            
            if (matches > maxMatches) {
                maxMatches = matches;
                bestMatch = professor;
            }
        }
        
        if (bestMatch == null) {
            throw new IllegalStateException("No professors available");
        }
        
        position.setSupervisor(bestMatch);
        positionMapper.save(position);
    }

    private int countMatchingKeywords(String professorInterests, String positionKeywords) {
        if (professorInterests == null || positionKeywords == null) return 0;
        
        String[] interests = professorInterests.toLowerCase().split(",\\s*");
        String[] keywords = positionKeywords.toLowerCase().split(",\\s*");
        
        int matches = 0;
        for (String interest : interests) {
            for (String keyword : keywords) {
                if (interest.trim().equals(keyword.trim())) {
                    matches++;
                    break; // Count each interest only once per keyword
                }
            }
        }
        return matches;
    }
}