package com.myy803.traineeship_app.service;

import com.myy803.traineeship_app.domainmodel.Professor;
import com.myy803.traineeship_app.domainmodel.TraineeshipPosition;
import com.myy803.traineeship_app.mapper.ProfessorMapper;
import com.myy803.traineeship_app.mapper.TraineeshipPositionMapper;

import jakarta.transaction.Transactional;

import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

@Component
public class AssignmentBasedOnInterests implements SupervisorAssignmentStrategy {
    private final TraineeshipPositionMapper positionMapper;
    private final ProfessorMapper professorMapper;

    public AssignmentBasedOnInterests(TraineeshipPositionMapper positionMapper, 
                                    ProfessorMapper professorMapper) {
        this.positionMapper = positionMapper;
        this.professorMapper = professorMapper;
    }

    @Transactional
    public void assign(Integer positionId) {
        // 1. Get fresh entities from database
        TraineeshipPosition position = positionMapper.findById(positionId)
            .orElseThrow(() -> new IllegalArgumentException("Position not found"));
        
        Professor professor = professorMapper.findByUsername("prof")
            .orElseThrow(() -> new IllegalStateException("Professor 'prof' not found"));

        // 2. Verify assignment
        if (position.getSupervisor() != null) {
            throw new IllegalStateException("Position already has a supervisor");
        }

        // 3. Assign with bidirectional relationship
        position.setSupervisor(professor);
        position.setIsAssigned(true);
        
        if (professor.getSupervisedPositions() == null) {
            professor.setSupervisedPositions(new ArrayList<>());
        }
        professor.getSupervisedPositions().add(position);

        // 4. Save with explicit flush
        positionMapper.saveAndFlush(position);
        professorMapper.saveAndFlush(professor);

        // 5. Immediate verification
        TraineeshipPosition updated = positionMapper.findById(positionId).get();
        System.out.println("VERIFICATION - Position " + positionId + 
                          " supervisor: " + updated.getSupervisor().getUsername());
    }

    private List<String> combinePositionKeywords(TraineeshipPosition position) {
        String combined = (position.getTopics() != null ? position.getTopics() : "") + "," + 
                         (position.getSkills() != null ? position.getSkills() : "");
        return Arrays.stream(combined.split(",\\s*"))
                   .map(String::trim)
                   .filter(s -> !s.isEmpty())
                   .collect(Collectors.toList());
    }

    private int countMatchingKeywords(List<String> professorInterests, List<String> positionKeywords) {
        if (professorInterests == null || professorInterests.isEmpty() || 
            positionKeywords == null || positionKeywords.isEmpty()) {
            return 0;
        }
        
        int matches = 0;
        for (String interest : professorInterests) {
            String lowerInterest = interest.toLowerCase().trim();
            for (String keyword : positionKeywords) {
                if (lowerInterest.equals(keyword)) {
                    matches++;
                    break; // Count each interest only once per keyword
                }
            }
        }
        return matches;
    }
}