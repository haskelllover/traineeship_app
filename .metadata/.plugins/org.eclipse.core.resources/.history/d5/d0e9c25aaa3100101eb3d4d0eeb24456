package com.myy803.traineeship_app.service;

import com.myy803.traineeship_app.domainmodel.Student;
import com.myy803.traineeship_app.domainmodel.TraineeshipPosition;
import com.myy803.traineeship_app.mapper.StudentMapper;
import com.myy803.traineeship_app.mapper.TraineeshipPositionMapper;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;

import java.util.List;

@Service
@Transactional
public class CommitteeServiceImpl implements CommitteeService {
    
    private final PositionsSearchFactory positionsSearchFactory;
    private final SupervisorAssignmentFactory supervisorAssignmentFactory;
    private final StudentMapper studentMapper;
    private final TraineeshipPositionMapper positionMapper;

    @Autowired
    public CommitteeServiceImpl(PositionsSearchFactory positionsSearchFactory,
                              SupervisorAssignmentFactory supervisorAssignmentFactory,
                              StudentMapper studentMapper,
                              TraineeshipPositionMapper positionMapper) {
        this.positionsSearchFactory = positionsSearchFactory;
        this.supervisorAssignmentFactory = supervisorAssignmentFactory;
        this.studentMapper = studentMapper;
        this.positionMapper = positionMapper;
    }

    @Override
    public String getCommitteeDashboard() {
        return "committee/dashboard";
    }

    @Override
    public String listTraineeshipApplication(Model model) {
        List<Student> applicants = studentMapper.findByLookingForTraineeship(true);
        model.addAttribute("applicants", applicants);
        return "committee/applications";
    }

    @Override
    public String instructions(String studentUsername, String strategy, Model model) {
        List<TraineeshipPosition> positions = positionsSearchFactory.create(strategy)
            .search(studentUsername);
        
        model.addAttribute("positions", positions);
        model.addAttribute("studentUsername", studentUsername);
        model.addAttribute("strategy", strategy);
        
        return "committee/instructions";
    }

    @Override
    public String assignPosition(Integer positionId, String studentUsername, Model model) {
        try {
            TraineeshipPosition position = positionMapper.findById(positionId)
                .orElseThrow(() -> new IllegalArgumentException("Position not found"));
            
            Student student = studentMapper.findByUsername(studentUsername)
                .orElseThrow(() -> new IllegalArgumentException("Student not found"));
            
            position.setStudent(student);
            position.setIsAssigned(true);
            student.setLookingForTraineeship(false);
            
            positionMapper.save(position);
            studentMapper.save(student);
            
            model.addAttribute("successMessage", "Position assigned successfully");
            return "redirect:/committee/applications";
        } catch (Exception e) {
            model.addAttribute("errorMessage", "Error assigning position: " + e.getMessage());
            return "committee/applications";
        }
    }

    @Override
    public String assignSupervisor(Integer positionId, String strategy, Model model) {
        try {
            supervisorAssignmentFactory.create(strategy).assign(positionId);
            model.addAttribute("successMessage", "Supervisor assigned successfully");
            return "redirect:/committee/assignees";
        } catch (Exception e) {
            model.addAttribute("errorMessage", "Error assigning supervisor: " + e.getMessage());
            return "committee/assignees";
        }
    }

    @Override
    public String listAssigneeTraineeships(Model model) {
        List<TraineeshipPosition> positions = positionMapper.findByIsAssigned(true);
        model.addAttribute("positions", positions);
        return "committee/assignees";
    }

    @Override
    public String completeAssignedTraineeships(Integer positionId, Model model) {
        try {
            TraineeshipPosition position = positionMapper.findById(positionId)
                .orElseThrow(() -> new IllegalArgumentException("Position not found"));
            
            double finalGrade = calculateFinalGrade(position);
            position.setPassFailGrade(finalGrade >= 5.0);
            
            Student student = position.getStudent();
            student.setAssignedTraineeship(null);
            student.setLookingForTraineeship(true);
            
            positionMapper.save(position);
            studentMapper.save(student);
            
            model.addAttribute("successMessage", "Traineeship completed successfully");
            return "redirect:/committee/assignees";
        } catch (Exception e) {
            model.addAttribute("errorMessage", "Error completing traineeship: " + e.getMessage());
            return "committee/assignees";
        }
    }

    private double calculateFinalGrade(TraineeshipPosition position) {
        return position.getEvaluations().stream()
            .mapToDouble(e -> (e.getStudentMotivation() + e.getStudentEfficiency() + e.getStudentEffectiveness()) / 3.0)
            .average()
            .orElse(0.0);
    }
}